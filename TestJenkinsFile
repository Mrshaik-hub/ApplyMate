pipeline {
    agent any

    tools {
        maven 'maven'      // Use your Maven tool name from Global Tool Configuration
        jdk 'jdk22'        // Use your JDK tool name from Global Tool Configuration
    }

    parameters {
        choice(name: 'HOST', choices: ['local', 'grid'], description: 'Please choose the host for your test run')
        choice(name: 'NAUKRI_LOGIN_TYPE', choices: ['gmail', 'otp'], description: 'Naukri login type (otp or gmail)')
        string(name: 'NAUKRI_GMAIL', defaultValue: '', description: 'Please provide Naukri Gmail')
        string(name: 'GMAIL_APP_PASSWORD', defaultValue: '', description: 'Please provide Naukri Gmail App password')
        string(name: 'NAUKRI_PHONE_NUMBER', defaultValue: '', description: 'Please provide Naukri Registered Number')
        string(name: 'NAUKRI_PASSWORD', defaultValue: '', description: 'Naukri app password (Base64 encoded)')
        choice(name: 'HEADLESS_MODE', choices: ['true', 'false'], description: 'Headless mode selection')
        string(name: 'TAGNAME', defaultValue: '', description: 'Tag name to run the scenario')

        // Git parameters (fix starts here)
        string(name: 'GIT_URL', defaultValue: 'https://github.com/Mrshaik-hub/ApplyMate.git', description: 'Git repository URL')
        string(name: 'GIT_BRANCH', defaultValue: 'main', description: 'Git branch to checkout') // <-- make sure this is correct
    }

    options {
        timestamps()
        skipDefaultCheckout(true)
    }

    environment {
        DOMAIN = ''
    }

    stages {
        stage('Setup Domain') {
            steps {
                script {
                    if (env.GIT_URL && env.GIT_URL.contains('Mate')) {
                        env.DOMAIN = "IS-${params.TAGNAME ?: ''}"
                    }
                }
            }
        }

        stage('Print Tool Versions') {
            steps {
                script {
                    if (isUnix()) {
                        sh 'mvn -v'
                        sh 'java -version'
                    } else {
                        bat 'mvn -v'
                        bat 'java -version'
                    }
                }
            }
        }

         stage('Checkout Code') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: params.GIT_BRANCH]],
                    doGenerateSubmoduleConfigurations: false,
                    extensions: [
                        [$class: 'CleanBeforeCheckout'],
                        [$class: 'WipeWorkspace']
                    ],
                    userRemoteConfigs: [[
                        url: 'https://github.com/Mrshaik-hub/ApplyMate.git',
                        credentialsId: 'your_git_credentials'
                    ]]
                ])
            }
        }

        stage('Start in Local or Grid') {
            when { expression { params.host != 'grid' } }
            steps {
                echo 'Skipping BrowserStack setup for local runs (no need)'
            }
        }

        stage('Run ApplyMate Script') {
            steps {
                script {
                    try {
                        echo 'Starting Visa Slot Monitoring Script'
                        if (isUnix()) {
                            sh """
                                mvn clean install \\
                                  -Denvironment=${params.HOST} \\
                                  -DloginType=${params['NAUKRI_LOGIN_TYPE']} \\
                                  -DnaukriGmail=${params['NAUKRI_GMAIL']} \\
                                  -DgmailAppPassword=${params['GMAIL_APP_PASSWORD']} \\
                                  -DotpNumber=${params['NAUKRI_PHONE_NUMBER']} \\
                                  -DNaukriPasswordBase64=${params['NAUKRI_PASSWORD']} \\
                                  -DHeadlessMode=${params.HEADLESS_MODE} \\
                                  -Dcucumber.filter.tags=${params.TAGNAME}
                            """
                        } else {
                            bat """
                                mvn clean install ^
                                  -Denvironment=${params.HOST} ^
                                  -DloginType=${params['NAUKRI_LOGIN_TYPE']} ^
                                  -DnaukriGmail=${params['NAUKRI_GMAIL']} ^
                                  -DgmailAppPassword=${params['GMAIL_APP_PASSWORD']} ^
                                  -DotpNumber=${params['NAUKRI_PHONE_NUMBER']} ^
                                  -DNaukriPasswordBase64=${params['NAUKRI_PASSWORD']} ^
                                  -DHeadlessMode=${params.HEADLESS_MODE} ^
                                  -Dcucumber.filter.tags=${params.TAGNAME}
                            """
                        }
                        echo 'ApplyMate Completed'
                    } catch (e) {
                        echo "ApplyMate Failed: ${e.getMessage()}"
                        currentBuild.result = 'FAILURE'
                    }
                }
            }
        }

    stage('Publish Cucumber HTML Report') {
  steps {
    publishHTML(target: [
      reportName: 'Cucumber Report',
      reportDir: 'target/cucumber-html-reports',
      reportFiles: 'overview-features.html',
      keepAll: true,
      alwaysLinkToLastBuild: true,
      allowMissing: false
    ])
  }
}
         stage('Generate and Publish Reports') {
           steps {
               script {
                   try {
                       def mainReport = 'target/cucumber-html-reports/overview-features.html'
                       def failedReport = 'target/cucumber-html-reports/overview-failures.html'

                       if (!fileExists(mainReport)) {
                           echo("Report file not found: ${mainReport}")
                           writeFile file: 'summary_report.html', text: """
                               <html><body>
                                 <h2>No Report Found</h2>
                                 <p>The expected report <b>${mainReport}</b> was not generated.</p>
                                 <p>Tag: <b>${params.TAGNAME}</b></p>
                                 <p>Environment: <b>${params.NAUKRI_GMAIL}</b></p>
                               </body></html>
                           """
                       } else {
                           def reportHtml = readFile(mainReport)
                           def matcher = reportHtml =~ /<table[\\s\\S]*?<\\/table>/
                           def table = matcher.find() ? matcher.group(0) : '<p>No test summary table found in report.</p>'

                           // Beautify table
                           table = table
                               .replaceAll(/<table\\b[^>]*>/, '<table border="1" style="border-collapse: collapse; width: 100%;">')
                               .replaceAll(/<td\\b[^>]*>/, '<td border="1">')
                               .replaceAll(/<a\\b[^>]*>/, '')
                               .replaceAll(/<\\/a>/, '')

                           // Optional link to failed report
                           def failureLink = fileExists(failedReport)
                               ? "<p><a href='target/cucumber-html-reports/overview-failures.html' target='_blank'>View Failures</a></p>"
                               : "<p>No test failures found.</p>"

                           writeFile file: 'summary_report.html', text: """
                               <html><body>
                                 <h2>Cucumber Test Execution Summary</h2>
                                 <p>Tag: <b>${params.TAGNAME}</b></p>
                                 <p>Environment: <b>${params.NAUKRI_GMAIL}</b></p>
                                 ${table}
                                 ${failureLink}
                                 <p><a href='target/cucumber-html-reports/overview-features.html' target='_blank'>Full Report</a></p>
                                 <p>Thank you,<br/>Automation Team</p>
                               </body></html>
                           """
                       }

                       // Archive reports
                       archiveArtifacts artifacts: 'summary_report.html', fingerprint: true
                       archiveArtifacts artifacts: 'target/cucumber-html-reports/**/*.html', fingerprint: true

                       // Publish main HTML report
                       publishHTML(target: [
                           reportName : 'Cucumber Report',
                           reportDir  : 'target/cucumber-html-reports',
                           reportFiles: 'overview-features.html',
                           keepAll    : true,
                           alwaysLinkToLastBuild: true
                       ])

                   } catch (err) {
                       echo "Report generation failed: ${err.getMessage()}"
                       writeFile file: 'summary_report.html', text: """
                           <html><body>
                             <h2>Report Generation Failed</h2>
                             <p>Error: ${err.getMessage()}</p>
                             <p>Tag: <b>${params.TagName}</b></p>
                             <p>Environment: <b>${params.ENVIRONMENT}</b></p>
                           </body></html>
                       """
                       archiveArtifacts artifacts: 'summary_report.html', fingerprint: true
                       currentBuild.result = 'FAILURE'
                   }
               }
           }
        }
       }


   post {
    always {
        script {
            // Set build status
            def status = currentBuild.result ?: 'SUCCESS'
            def reportLink = "${env.BUILD_URL}artifact/summary_report.html"
            
            echo "=== BUILD STATUS ==="
            echo "Status: ${status}"
            echo "Report URL: ${reportLink}"
            echo "Build URL: ${env.BUILD_URL}"
            
            // Verify all parameters exist
            echo "=== PARAMETERS ==="
            echo "TagName: ${params.getOrDefault('TagName', 'NOT PROVIDED')}"
            echo "Environment: ${params.getOrDefault('ENVIRONMENT', 'NOT PROVIDED')}"
            echo "Branch: ${params.getOrDefault('branch', 'NOT PROVIDED')}"
            
            try {
                echo "=== ATTEMPTING TO SEND EMAIL ==="
                
                // First try simple text email (basic connectivity test)
                mail(
                    to: 'shaikmahaboobsubhani00@gmail.com',
                    subject: "TEST: NAUKRI AI Build #${env.BUILD_NUMBER}",
                    body: """
                        Simple test email from pipeline
                        Status: ${status}
                        Build: ${env.BUILD_URL}
                    """
                )
                echo " Simple text email sent successfully"
                
                // Then try HTML email without attachments
                emailext(
                    to: 'shaikmahaboobsubhani00@gmail.com',
                    subject: "NAUKRI AI - Execution Summary | Build #${env.BUILD_NUMBER} | ${status}",
                    body: """
                        <html>
                        <body>
                            <h2>Simplified Test Version</h2>
                            <p>Status: <b style="color:${status == 'SUCCESS' ? 'green' : 'red'};">${status}</b></p>
                            <p>Build: <a href="${env.BUILD_URL}">${env.BUILD_URL}</a></p>
                        </body>
                        </html>
                    """,
                    mimeType: 'text/html',
                    attachLog: false
                )
                echo " Basic HTML email sent successfully"
                
                // Finally try the full email with attachments
                emailext(
                    to: 'shaikmahaboobsubhani00@gmail.com',
                    subject: "NAUKRI AI - Execution Summary | Build #${env.BUILD_NUMBER} | ${status}",
                    body: """
                        <html>
                        <body>
                            <h2>NAUKRI AI - Execution Summary</h2>
                            <table border="1" cellpadding="5" cellspacing="0" style="border-collapse: collapse; width: 100%;">
                                ${params.TagName ? '<tr><th>Execution Tag</th><td>' + params.TagName + '</td></tr>' : ''}
                                ${params.ENVIRONMENT ? '<tr><th>Environment</th><td>' + params.ENVIRONMENT + '</td></tr>' : ''}
                                ${params.branch ? '<tr><th>Branch</th><td>' + params.branch + '</td></tr>' : ''}
                                ${params.MRS_VALUE ? '<tr><th>MRS Value</th><td>' + params.MRS_VALUE + '</td></tr>' : ''}
                                ${params.MRT_VALUE ? '<tr><th>MRT Value</th><td>' + params.MRT_VALUE + '</td></tr>' : ''}
                                ${params.host ? '<tr><th>Host</th><td>' + params.host + '</td></tr>' : ''}
                                ${params.HEADLESS_MODE ? '<tr><th>Headless Mode</th><td>' + params.HEADLESS_MODE + '</td></tr>' : ''}
                                <tr><th>Status</th><td><b style="color:${status == 'SUCCESS' ? 'green' : 'red'};">${status}</b></td></tr>
                            </table>
                            <br/>
                            <p>Full Report: <a href="${reportLink}">Click here to view the complete HTML report</a></p>
                            <br/>
                            <p>Kindly contact <b>shaik</b> for any queries.</p>
                        </body>
                        </html>
                    """,
                    mimeType: 'text/html',
                    attachLog: true,
                    compressLog: true,
                    // Advanced SMTP settings (uncomment if needed)
                    // smtpServer: 'your.smtp.server.com',
                    // smtpPort: '587',
                    // smtpAuth: true,
                    // smtpUser: 'your_username',
                    // smtpPassword: 'your_password',
                    // smtpStarttls: true
                )
                echo " Full HTML email with attachments sent successfully"
                
            } catch (Exception e) {
                echo " Email sending failed: ${e.toString()}"
                
                // Network diagnostics
                echo "=== NETWORK DIAGNOSTICS ==="
                try {
                    def smtpServer = Jenkins.instance.getDescriptor('hudson.plugins.emailext.ExtendedEmailPublisher').smtpServer
                    echo "Attempting to connect to SMTP server: ${smtpServer}"
                    
                    // Test basic connectivity
                    def pingResult = sh(script: "ping -c 4 ${smtpServer} || true", returnStdout: true)
                    echo "Ping results:\n${pingResult}"
                    
                    // Test port connectivity
                    def ncResult = sh(script: "nc -zv ${smtpServer} 587 || true", returnStdout: true)
                    echo "Netcat results:\n${ncResult}"
                    
                } catch (Exception diagErr) {
                    echo " Diagnostics failed: ${diagErr.toString()}"
                }
                
                // Fallback notification
                echo "=== ATTEMPTING FALLBACK NOTIFICATION ==="
                try {
                    mail(
                        to: 'shaikmahaboobsubhani00@gmail.com',
                        subject: "URGENT: Email System Failure for Build #${env.BUILD_NUMBER}",
                        body: """
                            The automated build email failed to send properly.
                            
                            Build Status: ${status}
                            Build URL: ${env.BUILD_URL}
                            
                            Error Details:
                            ${e.toString()}
                            
                            Please check Jenkins logs for full details.
                        """
                    )
                    echo " Fallback notification sent"
                } catch (Exception fallbackErr) {
                    echo " CRITICAL: Fallback notification also failed: ${fallbackErr.toString()}"
                }
            }
        }
    }
}
